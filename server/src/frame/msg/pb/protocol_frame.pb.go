// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocol_frame.proto

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		protocol_frame.proto

	It has these top-level messages:
		CSRequestStart
		CSResponseStart
		SCStartGame
		CSFrameNotify
		SCFrameNotify
*/
package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CSRequestStart struct {
}

func (m *CSRequestStart) Reset()                    { *m = CSRequestStart{} }
func (m *CSRequestStart) String() string            { return proto.CompactTextString(m) }
func (*CSRequestStart) ProtoMessage()               {}
func (*CSRequestStart) Descriptor() ([]byte, []int) { return fileDescriptorProtocolFrame, []int{0} }

type CSResponseStart struct {
	Uid uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *CSResponseStart) Reset()                    { *m = CSResponseStart{} }
func (m *CSResponseStart) String() string            { return proto.CompactTextString(m) }
func (*CSResponseStart) ProtoMessage()               {}
func (*CSResponseStart) Descriptor() ([]byte, []int) { return fileDescriptorProtocolFrame, []int{1} }

func (m *CSResponseStart) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type SCStartGame struct {
	Uins []uint64 `protobuf:"varint,1,rep,packed,name=uins" json:"uins,omitempty"`
}

func (m *SCStartGame) Reset()                    { *m = SCStartGame{} }
func (m *SCStartGame) String() string            { return proto.CompactTextString(m) }
func (*SCStartGame) ProtoMessage()               {}
func (*SCStartGame) Descriptor() ([]byte, []int) { return fileDescriptorProtocolFrame, []int{2} }

func (m *SCStartGame) GetUins() []uint64 {
	if m != nil {
		return m.Uins
	}
	return nil
}

type CSFrameNotify struct {
	Uin  uint64   `protobuf:"varint,1,opt,name=uin,proto3" json:"uin,omitempty"`
	Keys []uint32 `protobuf:"varint,2,rep,packed,name=keys" json:"keys,omitempty"`
}

func (m *CSFrameNotify) Reset()                    { *m = CSFrameNotify{} }
func (m *CSFrameNotify) String() string            { return proto.CompactTextString(m) }
func (*CSFrameNotify) ProtoMessage()               {}
func (*CSFrameNotify) Descriptor() ([]byte, []int) { return fileDescriptorProtocolFrame, []int{3} }

func (m *CSFrameNotify) GetUin() uint64 {
	if m != nil {
		return m.Uin
	}
	return 0
}

func (m *CSFrameNotify) GetKeys() []uint32 {
	if m != nil {
		return m.Keys
	}
	return nil
}

type SCFrameNotify struct {
	Keys         []*CSFrameNotify `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
	CurrentFrame uint32           `protobuf:"varint,2,opt,name=currentFrame,proto3" json:"currentFrame,omitempty"`
	NextFrame    uint32           `protobuf:"varint,3,opt,name=nextFrame,proto3" json:"nextFrame,omitempty"`
}

func (m *SCFrameNotify) Reset()                    { *m = SCFrameNotify{} }
func (m *SCFrameNotify) String() string            { return proto.CompactTextString(m) }
func (*SCFrameNotify) ProtoMessage()               {}
func (*SCFrameNotify) Descriptor() ([]byte, []int) { return fileDescriptorProtocolFrame, []int{4} }

func (m *SCFrameNotify) GetKeys() []*CSFrameNotify {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *SCFrameNotify) GetCurrentFrame() uint32 {
	if m != nil {
		return m.CurrentFrame
	}
	return 0
}

func (m *SCFrameNotify) GetNextFrame() uint32 {
	if m != nil {
		return m.NextFrame
	}
	return 0
}

func init() {
	proto.RegisterType((*CSRequestStart)(nil), "pb.CSRequestStart")
	proto.RegisterType((*CSResponseStart)(nil), "pb.CSResponseStart")
	proto.RegisterType((*SCStartGame)(nil), "pb.SCStartGame")
	proto.RegisterType((*CSFrameNotify)(nil), "pb.CSFrameNotify")
	proto.RegisterType((*SCFrameNotify)(nil), "pb.SCFrameNotify")
}
func (m *CSRequestStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSRequestStart) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CSResponseStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSResponseStart) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtocolFrame(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *SCStartGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SCStartGame) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uins) > 0 {
		dAtA2 := make([]byte, len(m.Uins)*10)
		var j1 int
		for _, num := range m.Uins {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtocolFrame(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *CSFrameNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSFrameNotify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uin != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProtocolFrame(dAtA, i, uint64(m.Uin))
	}
	if len(m.Keys) > 0 {
		dAtA4 := make([]byte, len(m.Keys)*10)
		var j3 int
		for _, num := range m.Keys {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtocolFrame(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	return i, nil
}

func (m *SCFrameNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SCFrameNotify) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, msg := range m.Keys {
			dAtA[i] = 0xa
			i++
			i = encodeVarintProtocolFrame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CurrentFrame != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProtocolFrame(dAtA, i, uint64(m.CurrentFrame))
	}
	if m.NextFrame != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProtocolFrame(dAtA, i, uint64(m.NextFrame))
	}
	return i, nil
}

func encodeVarintProtocolFrame(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CSRequestStart) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CSResponseStart) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovProtocolFrame(uint64(m.Uid))
	}
	return n
}

func (m *SCStartGame) Size() (n int) {
	var l int
	_ = l
	if len(m.Uins) > 0 {
		l = 0
		for _, e := range m.Uins {
			l += sovProtocolFrame(uint64(e))
		}
		n += 1 + sovProtocolFrame(uint64(l)) + l
	}
	return n
}

func (m *CSFrameNotify) Size() (n int) {
	var l int
	_ = l
	if m.Uin != 0 {
		n += 1 + sovProtocolFrame(uint64(m.Uin))
	}
	if len(m.Keys) > 0 {
		l = 0
		for _, e := range m.Keys {
			l += sovProtocolFrame(uint64(e))
		}
		n += 1 + sovProtocolFrame(uint64(l)) + l
	}
	return n
}

func (m *SCFrameNotify) Size() (n int) {
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, e := range m.Keys {
			l = e.Size()
			n += 1 + l + sovProtocolFrame(uint64(l))
		}
	}
	if m.CurrentFrame != 0 {
		n += 1 + sovProtocolFrame(uint64(m.CurrentFrame))
	}
	if m.NextFrame != 0 {
		n += 1 + sovProtocolFrame(uint64(m.NextFrame))
	}
	return n
}

func sovProtocolFrame(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProtocolFrame(x uint64) (n int) {
	return sovProtocolFrame(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CSRequestStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolFrame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSRequestStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSRequestStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolFrame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolFrame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSResponseStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolFrame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSResponseStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSResponseStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolFrame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolFrame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolFrame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SCStartGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolFrame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SCStartGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SCStartGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolFrame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Uins = append(m.Uins, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolFrame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolFrame
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolFrame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Uins = append(m.Uins, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Uins", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolFrame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolFrame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSFrameNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolFrame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSFrameNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSFrameNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uin", wireType)
			}
			m.Uin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolFrame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uin |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolFrame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Keys = append(m.Keys, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocolFrame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtocolFrame
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocolFrame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Keys = append(m.Keys, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolFrame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolFrame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SCFrameNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocolFrame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SCFrameNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SCFrameNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolFrame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocolFrame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, &CSFrameNotify{})
			if err := m.Keys[len(m.Keys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentFrame", wireType)
			}
			m.CurrentFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolFrame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentFrame |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextFrame", wireType)
			}
			m.NextFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocolFrame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextFrame |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocolFrame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocolFrame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtocolFrame(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtocolFrame
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocolFrame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocolFrame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProtocolFrame
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProtocolFrame
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProtocolFrame(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProtocolFrame = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtocolFrame   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("protocol_frame.proto", fileDescriptorProtocolFrame) }

var fileDescriptorProtocolFrame = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x28, 0xca, 0x2f,
	0xc9, 0x4f, 0xce, 0xcf, 0x89, 0x4f, 0x2b, 0x4a, 0xcc, 0x4d, 0xd5, 0x03, 0x73, 0x85, 0x98, 0x0a,
	0x92, 0x94, 0x04, 0xb8, 0xf8, 0x9c, 0x83, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x82, 0x4b,
	0x12, 0x8b, 0x4a, 0x94, 0x94, 0xb9, 0xf8, 0x41, 0x22, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x60,
	0x21, 0x21, 0x01, 0x2e, 0xe6, 0xd2, 0xcc, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x96, 0x20, 0x10,
	0x53, 0x49, 0x91, 0x8b, 0x3b, 0xd8, 0x19, 0x2c, 0xe9, 0x9e, 0x98, 0x9b, 0x2a, 0x24, 0xc4, 0xc5,
	0x52, 0x9a, 0x99, 0x57, 0x2c, 0xc1, 0xa8, 0xc0, 0xac, 0xc1, 0x12, 0x04, 0x66, 0x2b, 0x99, 0x72,
	0xf1, 0x3a, 0x07, 0xbb, 0x81, 0xac, 0xf3, 0xcb, 0x2f, 0xc9, 0x4c, 0xab, 0x84, 0x98, 0x92, 0x87,
	0x30, 0x25, 0x0f, 0xa4, 0x2d, 0x3b, 0xb5, 0xb2, 0x58, 0x82, 0x49, 0x81, 0x59, 0x83, 0x37, 0x08,
	0xcc, 0x56, 0xaa, 0xe0, 0xe2, 0x0d, 0x76, 0x46, 0xd6, 0xa6, 0x0a, 0x55, 0x04, 0x32, 0x9b, 0xdb,
	0x48, 0x50, 0xaf, 0x20, 0x49, 0x0f, 0xc5, 0x5c, 0x88, 0x3e, 0x21, 0x25, 0x2e, 0x9e, 0xe4, 0xd2,
	0xa2, 0xa2, 0xd4, 0xbc, 0x12, 0xb0, 0x9c, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x6f, 0x10, 0x8a, 0x98,
	0x90, 0x0c, 0x17, 0x67, 0x5e, 0x6a, 0x05, 0x54, 0x01, 0x33, 0x58, 0x01, 0x42, 0xc0, 0x49, 0xe0,
	0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e,
	0x21, 0x89, 0x0d, 0x1c, 0x4e, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x1d, 0x40, 0x47,
	0x3f, 0x01, 0x00, 0x00,
}
