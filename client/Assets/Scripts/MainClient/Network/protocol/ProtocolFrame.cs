// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol_frame.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace MainClient {

  /// <summary>Holder for reflection information generated from protocol_frame.proto</summary>
  public static partial class ProtocolFrameReflection {

    #region Descriptor
    /// <summary>File descriptor for protocol_frame.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProtocolFrameReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRwcm90b2NvbF9mcmFtZS5wcm90bxIKTWFpbkNsaWVudCIQCg5DU1JlcXVl",
            "c3RTdGFydCIeCg9DU1Jlc3BvbnNlU3RhcnQSCwoDdWlkGAEgASgEIhsKC1ND",
            "U3RhcnRHYW1lEgwKBHVpbnMYASADKAQiKgoNQ1NGcmFtZU5vdGlmeRILCgN1",
            "aW4YASABKAQSDAoEa2V5cxgCIAMoDSJhCg1TQ0ZyYW1lTm90aWZ5EicKBGtl",
            "eXMYASADKAsyGS5NYWluQ2xpZW50LkNTRnJhbWVOb3RpZnkSFAoMY3VycmVu",
            "dEZyYW1lGAIgASgNEhEKCW5leHRGcmFtZRgDIAEoDWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::MainClient.CSRequestStart), global::MainClient.CSRequestStart.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MainClient.CSResponseStart), global::MainClient.CSResponseStart.Parser, new[]{ "Uid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MainClient.SCStartGame), global::MainClient.SCStartGame.Parser, new[]{ "Uins" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MainClient.CSFrameNotify), global::MainClient.CSFrameNotify.Parser, new[]{ "Uin", "Keys" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MainClient.SCFrameNotify), global::MainClient.SCFrameNotify.Parser, new[]{ "Keys", "CurrentFrame", "NextFrame" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CSRequestStart : pb::IMessage<CSRequestStart> {
    private static readonly pb::MessageParser<CSRequestStart> _parser = new pb::MessageParser<CSRequestStart>(() => new CSRequestStart());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSRequestStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MainClient.ProtocolFrameReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSRequestStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSRequestStart(CSRequestStart other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSRequestStart Clone() {
      return new CSRequestStart(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSRequestStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSRequestStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSRequestStart other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class CSResponseStart : pb::IMessage<CSResponseStart> {
    private static readonly pb::MessageParser<CSResponseStart> _parser = new pb::MessageParser<CSResponseStart>(() => new CSResponseStart());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSResponseStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MainClient.ProtocolFrameReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSResponseStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSResponseStart(CSResponseStart other) : this() {
      uid_ = other.uid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSResponseStart Clone() {
      return new CSResponseStart(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private ulong uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSResponseStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSResponseStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid != 0UL) hash ^= Uid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSResponseStart other) {
      if (other == null) {
        return;
      }
      if (other.Uid != 0UL) {
        Uid = other.Uid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SCStartGame : pb::IMessage<SCStartGame> {
    private static readonly pb::MessageParser<SCStartGame> _parser = new pb::MessageParser<SCStartGame>(() => new SCStartGame());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCStartGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MainClient.ProtocolFrameReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCStartGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCStartGame(SCStartGame other) : this() {
      uins_ = other.uins_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCStartGame Clone() {
      return new SCStartGame(this);
    }

    /// <summary>Field number for the "uins" field.</summary>
    public const int UinsFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_uins_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> uins_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Uins {
      get { return uins_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCStartGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCStartGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!uins_.Equals(other.uins_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= uins_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      uins_.WriteTo(output, _repeated_uins_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += uins_.CalculateSize(_repeated_uins_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCStartGame other) {
      if (other == null) {
        return;
      }
      uins_.Add(other.uins_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            uins_.AddEntriesFrom(input, _repeated_uins_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CSFrameNotify : pb::IMessage<CSFrameNotify> {
    private static readonly pb::MessageParser<CSFrameNotify> _parser = new pb::MessageParser<CSFrameNotify>(() => new CSFrameNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CSFrameNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MainClient.ProtocolFrameReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSFrameNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSFrameNotify(CSFrameNotify other) : this() {
      uin_ = other.uin_;
      keys_ = other.keys_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CSFrameNotify Clone() {
      return new CSFrameNotify(this);
    }

    /// <summary>Field number for the "uin" field.</summary>
    public const int UinFieldNumber = 1;
    private ulong uin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uin {
      get { return uin_; }
      set {
        uin_ = value;
      }
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_keys_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> keys_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Keys {
      get { return keys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CSFrameNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CSFrameNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uin != other.Uin) return false;
      if(!keys_.Equals(other.keys_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uin != 0UL) hash ^= Uin.GetHashCode();
      hash ^= keys_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uin != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uin);
      }
      keys_.WriteTo(output, _repeated_keys_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uin != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uin);
      }
      size += keys_.CalculateSize(_repeated_keys_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CSFrameNotify other) {
      if (other == null) {
        return;
      }
      if (other.Uin != 0UL) {
        Uin = other.Uin;
      }
      keys_.Add(other.keys_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uin = input.ReadUInt64();
            break;
          }
          case 18:
          case 16: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SCFrameNotify : pb::IMessage<SCFrameNotify> {
    private static readonly pb::MessageParser<SCFrameNotify> _parser = new pb::MessageParser<SCFrameNotify>(() => new SCFrameNotify());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SCFrameNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MainClient.ProtocolFrameReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFrameNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFrameNotify(SCFrameNotify other) : this() {
      keys_ = other.keys_.Clone();
      currentFrame_ = other.currentFrame_;
      nextFrame_ = other.nextFrame_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SCFrameNotify Clone() {
      return new SCFrameNotify(this);
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MainClient.CSFrameNotify> _repeated_keys_codec
        = pb::FieldCodec.ForMessage(10, global::MainClient.CSFrameNotify.Parser);
    private readonly pbc::RepeatedField<global::MainClient.CSFrameNotify> keys_ = new pbc::RepeatedField<global::MainClient.CSFrameNotify>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MainClient.CSFrameNotify> Keys {
      get { return keys_; }
    }

    /// <summary>Field number for the "currentFrame" field.</summary>
    public const int CurrentFrameFieldNumber = 2;
    private uint currentFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurrentFrame {
      get { return currentFrame_; }
      set {
        currentFrame_ = value;
      }
    }

    /// <summary>Field number for the "nextFrame" field.</summary>
    public const int NextFrameFieldNumber = 3;
    private uint nextFrame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NextFrame {
      get { return nextFrame_; }
      set {
        nextFrame_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SCFrameNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SCFrameNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!keys_.Equals(other.keys_)) return false;
      if (CurrentFrame != other.CurrentFrame) return false;
      if (NextFrame != other.NextFrame) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= keys_.GetHashCode();
      if (CurrentFrame != 0) hash ^= CurrentFrame.GetHashCode();
      if (NextFrame != 0) hash ^= NextFrame.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      keys_.WriteTo(output, _repeated_keys_codec);
      if (CurrentFrame != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(CurrentFrame);
      }
      if (NextFrame != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NextFrame);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += keys_.CalculateSize(_repeated_keys_codec);
      if (CurrentFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurrentFrame);
      }
      if (NextFrame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NextFrame);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SCFrameNotify other) {
      if (other == null) {
        return;
      }
      keys_.Add(other.keys_);
      if (other.CurrentFrame != 0) {
        CurrentFrame = other.CurrentFrame;
      }
      if (other.NextFrame != 0) {
        NextFrame = other.NextFrame;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
          case 16: {
            CurrentFrame = input.ReadUInt32();
            break;
          }
          case 24: {
            NextFrame = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
